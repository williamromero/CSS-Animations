MODELO VISTA CONTROLADOR
Ruby on Rails

Cada aplicación contiene en sí, una carpeta llamada "app" en la que se
encuentran los folders "controllers", "models" y "views". Esto debido a que
responde a la lógica MVC (aplicación de estructura).
P

	- Modelo: Está formado por clases. Cada clase es un modelo y cada modelo, 
			 representa una tabla en la DB. Por lo tanto, es el encargado de trabajar con la lógica de la base de datos.
			 Por otra parte, los modelos son "objetos" que se crean para la aplicación web.
			 Los modelos son la forma como se encapsulara la informacion, es decir es el tipo de informacion que finalmente vera el usuario. 

	- Vista: Es la representación final de una petición. (HTML, ERB, JS, CSS) Es decir,
			 la forma en la que se presentará la información.
			 Asimismo, es como cuando en un archivo PHP utilizamos diferentes plantillas HTML para desplegar lo que se busca en la DB con scripts de PHP y MySQL. Por lo tanto, las vistas son las que despliegan las funciones que se requieren al explorador.

	- Controlador: Es el encargado de la lógica de la petición. Es un puente entre la 
			 Vista y el modelo. Cada controlador, será una clase con métodos y por cada método habrá una vista que representará la versión procesada de ese método.
			 El controlador, por lo tanto se traduce en los archivos que operan acciones y scripts, haciendo llamadas a diferentes propiedades del objeto (las clases de la DB) y desplegandolas luego en la vista.

			 Los controladores son como las operaciones que se van a realizar, es ahi donde se incluyen los metodos a los cuales se podran acceder por medio de una URL: Ejemplo de una url donde se llama a un controlador usuario y a su metodo login, con dos parametros: 
			 http://misitioweb.com/usuario/login/{par... 

			 Un controlador puede acceder y utilizar una clase Modelo para pasar datos a las vistas. 

Proceso de Desarrollo:

	Paso 01:
		-> Cuando se visita la página: 0.0.0.0:3000/users se emite una solicitud al servidor, esta solicitud llega al archivo 'config/routes.db'.
		Este, es un archivo que se encuentra en la carpeta config y mapea en base a la URL.
		El archivo "routes.rb", llamará a los recursos de acción del controlador Users o Posts en este ejemplo.

			MiblogDemo::Application.routes.draw do
				resources :posts
				resources :users
			end

		Inicialmente, la envía a la acción index del controlador al que corresponde, en este caso 'users_controller' o 'posts_controller'.

	Paso 02:
		-> Cuando nos dirigmos a las acciones de los controladores, podemos evaluar las acciones predefinidas si utilizamos "Scaffold".

		- def index
			@users = User.all
		end

		En este caso, la acción index solicita al "modelo User" que le provea de la lista de todos los usuarios y luego deposita ese valor en la variable @users.

	Paso 03:
		-> Hace la petición al modelo, que con sus clases, maneja los modelos, que a sus vez son tablas.

	Paso 04:
		-> Esta petición es recibida por la clase User, la cual hereda de la biblioteca "ActiveRecord", la cual realiza una acción "Mapeo - Base Relacional" (Mapea una tabla). La clase del modelo debe de declararse en singular debido a que la tabla deberá de reconocerse en plural.

			class User < ActiveRecord::Base
				has_many :posts
			end

	Paso 05:

		El modelo de User devuelve la lista de usuarios al controlador Users_Controller.

	Paso 06:

		El controlador deposita la lista en la variable @Users, la cual será impresa en la vista 'index', del controlador Users.

	Paso 07:

		La vista utiliza código embebido. Es decir que permite la incorporación del lenguaje Ruby, el cual traducirá a HTML.
		Las variables que comienzan con @, son variables de instancia de un método que representa una vista. En ella se contienen los elementos desplegar en la vista.

	Paso 08: 

		El controlador, pasa código HTML a la vista.
		
¿QUÉ ES RoR?

	- Es un framework creado en Ruby para desarrollar aplicaciones web.
	- Convención sobre Configuración: Significa que el lenguaje toma decisiones respecto a ubicación de archivos, funciones y acciones que originalmente se tomarían sin los elementos de dicha librería.

	Arquitectura de Rails - MVC

	Modelo: Es la representación de la información con la cual el sistema opera. Componentes contables y descriptivos que conviven con métodos para su manipulación.

	Vista:
	
	Controlador: Son los que se encargan de recibir las peticiones HTTP y de acuerdo a ello, realiza una acción para responder de forma adecuada.

El usuario, interactua con el controlador mediante las rutas (las páginas), luego los manipuladores se encargan de realizar la conexión con los modelos. Una vez esto hecho y la conexión con los modelos, el controlador se encarga de obtener los datos para la vista.


Al lío:

1. Rails new musicapp
2. Rails server (El contenido se correo en un servidor de aplicaciones llamado WebRick)


Estructura de Aplicación:
	- app => Se contiene todo el código relacionado a la lógica de la aplicación. Por convención, todo el contenido de controllers, models y views, se situan en esta carpeta.
		-> Assets: son todos los archivos que se requieren. (imgs, js, css)
		-> Controllers: Los controladores son los que se encargan de manejar todas las peticiones HTTP y la devolución de los modelos.
		-> Helpers: Se coloca toda la estructura de código que vamos a reutilizar en todas las vistas.
		-> Mailers: Se 
		-> Modelos: Contienen toda la lógica de la app y el contenido de las clases de las bases de datos.
	- bin =>
	- config => 
		-> Environments: Configuraciones que tenemos cuando estamos desarrollando. Estas son diferentes en prueba, en desarrollo y en producción. Por ejemplo, en método de desarrollo, las vistas se cargan en su totalidad, lo que no sucede en producción.
		-> Initializers: Configuraciones que necesitamos que se carguen al iniciar el servidor. 
			* database.yml => Es en donde se guarda la configuración de las bases de datos. Usuario, tipo de DB, contraseña, etc.
			* routes.rb => Son las rutas que se generan por cada controlador. 
			* secrets.yml => Es el archivo en el que se guardan todas las llaves de usuario.
	- db =>	Es donde se guardan las configuraciones de los modelos.
	- lib => Para librerías de terceros.
	- log => Registro de todas las interacciones con nuestra aplicación.
	- public => Se encuentran todos los archivos estáticos (404.html, 500.html) que no necesitan el procesamiento de Ruby.
	- test => 
	- tmp =>
	- vendor =>
			*gemfile = Es donde se especifican las gemas a funcionar en el proyecto. Se describen todas las dependencias de gemas a funcionar en el proyecto.
				- sass: css precompilado
				- coffee script: javascript precompilado al estilo Rails
				- turbolinks: gema para crear aplicaciones que no tengan que recargarse completas sino solo los elementos a modificar. Es una alternativa parecida a Angular o React.

SCAFFOLD 
	
	Es una función que servirá para crear una estructura de vistas, controladores para manejar los modelos.

	rails generate scaffold track title:string album:string artist:string
						 model_name		name_field:data_type

MIGRACIONES

	Las migraciones son las que le dicen a la DB que tablas y campos debe de generar tanto como cambiar tipo de datos de campos o eliminar una tabla o campo.

	Models-> Nombre en singular
	Tabla -> Nombre en plural

	class CreateTracks < ActiveRecord::Migration
	  def change
	    create_table :tracks do |t|
	      t.string :title
	      t.string :album
	      t.string :artist

	      t.timestamps null: false // hora de creación
	    end
	  end
	end

	rake db:migrate

	"LA FORMA DE INTERACTUAR CON LOS MODELOS, SON LAS RUTAS" por medio
	de los controladores.

	cd /config/routes.rb/

	Rails.application.routes.draw do
  	resources :tracks

  	rake routes

 EXPLICACIÓN MVC en RAILS

 	-> En routes, podemos ver las rutas que responden a las acciones del controlador.

 	Prefix	Verb	URI Pattern			Controller#Action
 	tracks  GET 	/tracks(.:format)	tracks#index

 	Lo que quiere decir, es que cuando vayamos a "/tracks", esta ruta corresponde a una acción de nuestro controlador y que tiene un método index.

 	"LOS MODELOS SON LOS OBJETOS QUE CONTIENEN LA LÓGICA DE NUESTRA APLICACIÓN"

Referencias: 
1. http://www.sectornueve.com/programacion/ingenieria-de-software/mvc-para-dummies/
2. http://www.webwindowslinux.com/2013/05/explicando-la-arquitectura-aspnet-mvc.html
3. https://gist.github.com/Elicia/8473536 //-> MVC Expliación
